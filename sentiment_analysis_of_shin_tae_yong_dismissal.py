# -*- coding: utf-8 -*-
"""Sentiment Analysis of Shin Tae-Yong Dismissal.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qeb3ownlV3CKHWg5kSpX7aXfIvKz_ZFF
"""

import pandas as pd
import re
from nltk.sentiment.vader import SentimentIntensityAnalyzer
from textblob import TextBlob
import nltk
nltk.download('vader_lexicon')

import numpy as np
from PIL import Image
from wordcloud import WordCloud, STOPWORDS
import matplotlib.pyplot as plt

df1 = pd.read_csv("/content/drive/My Drive/PORTOFOLIO/SENTIMENT ANALYSIS/SHIN TAE YONG DISMISSAL/sty.csv")
display(df1)

df2 = pd.read_csv("/content/drive/My Drive/PORTOFOLIO/SENTIMENT ANALYSIS/SHIN TAE YONG DISMISSAL/sty2.csv")
display(df2)

df_combined = pd.concat([df1, df2], ignore_index=True)
display(df_combined)

filtered_df = df_combined.loc[:, ['full_text']]
display(filtered_df)

def preprocess_tweet(sen):
    sentence = sen.lower()

    sentence = re.sub('RT @\w+: '," ", sentence)

    sentence = re.sub("(@[A-Za-z0-9]+)|([^0-9A-Za-z \t])|(\w+:\/\/\S+)"," ", sentence)

    sentence = re.sub(r"\s+[a-zA-Z]\s+", ' ', sentence)

    sentence = re.sub(r'\s+', ' ', sentence)

    return sentence

cleaned_tweets = []

for tweet in filtered_df['full_text']:
  cleaned_tweet = preprocess_tweet(tweet)
  cleaned_tweets.append(cleaned_tweet)

filtered_df['full_text'] = cleaned_tweets
display(filtered_df)

!pip install googletrans==4.0.0-rc1
from googletrans import Translator

translator = Translator()

def translate_to_english(text):
  try:
    translation = translator.translate(text, dest='en')
    return translation.text
  except Exception as e:
    print(f"Error translating: {e}")
    return text

filtered_df['english_text'] = filtered_df['full_text'].apply(translate_to_english)

display(filtered_df)

filtered_df.to_csv('filtered_df.csv', index=False)

filtered_df[['polarity', 'subjectivity']] = filtered_df['english_text'].apply(lambda Text: pd.Series(TextBlob(Text).sentiment))
for index, row in filtered_df['english_text'].items():
    score = SentimentIntensityAnalyzer().polarity_scores(row)
    neg = score['neg']
    neu = score['neu']
    pos = score['pos']
    comp = score['compound']
    if comp <= -0.05:
        filtered_df.loc[index, 'sentiment'] = "negative"
    elif comp >= 0.05:
        filtered_df.loc[index, 'sentiment'] = "positive"
    else:
        filtered_df.loc[index, 'sentiment'] = "neutral"
    filtered_df.loc[index, 'neg'] = neg
    filtered_df.loc[index, 'neu'] = neu
    filtered_df.loc[index, 'pos'] = pos
    filtered_df.loc[index, 'compound'] = comp

display(filtered_df)

def sentiment_counts(data,feature):
    total=data.loc[:,feature].value_counts(dropna=False)
    percentage=round(data.loc[:,feature].value_counts(dropna=False,normalize=True)*100,2)
    return pd.concat([total,percentage],axis=1,keys=['Total','Percentage'])

sentiment_counts(filtered_df,"sentiment")

pichart = sentiment_counts(filtered_df,"sentiment")

names = pichart.index
size = pichart["Percentage"]

plt.figure(figsize=(8, 8))
plt.pie(size, labels=names, colors=['green', 'blue', 'red'],
        autopct='%1.1f%%', startangle=90, pctdistance=0.85,
        textprops={'fontsize': 12, 'weight': 'bold'})

centre_circle = plt.Circle((0, 0), 0.70, color='white')
fig = plt.gcf()

fig.gca().add_artist(centre_circle)

plt.title('Sentiment Analysis Result', fontsize=16, fontweight='bold')

plt.axis('equal')
plt.show()

text = " ".join(review for review in filtered_df.english_text)
print ("There are {} words in the combination of all review.".format(len(text)))
stopwords = set(STOPWORDS)
wordcloud = WordCloud(background_color="white",stopwords=stopwords,max_words=1000,width=800,height=400,collocations=False).generate(text)

plt.figure(figsize=(16,10))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
plt.show()

